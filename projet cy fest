#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define LENGTH 20
#define MAXSIEGE 100

typedef struct
{
    int estReserve;
    int prixCategorie;
} Siege;

typedef struct
{
    char nom[LENGTH];
    long nbRangee;
    char artiste[LENGTH];
    Siege **sieges;
    long *nbSiegesParRangee;
    time_t heureFin; // type de variable time pour les dates et les heures
} Salle;

typedef struct
{
    Salle **salles;
    long nbsalle;
    long sommesieges;
} GestionSalles;

// prototypes
void afficherBordures();
void afficherMenu();
void sauvegarderSalle(GestionSalles *gestion);
void modifierdetailsalle(GestionSalles *gestion);
void afficherDetailSalle(GestionSalles *gestion);
Salle *creerSalle(char *nom, long nbr, long rangeeA, long rangeeB, long rangeeC);
void afficherPlanSalle(Salle *salle);
void saisieDonneesSalle(GestionSalles *gestion);
void modeManager(GestionSalles *gestion);
void modeFestivalier(GestionSalles *gestion);
int estConcertTermine(Salle *salle);
void reserverSalle(Salle *salle);

void afficherBordures()
{
    printf("\n*********************************\n");
}

void afficherMenu()
{
    afficherBordures();
    printf("Bienvenue : \n");
    afficherBordures();
    printf("1. MODE MANAGER\n");
    printf("2. MODE FESTIVALIER\n");
    printf("0. QUITTER\n");
    afficherBordures();
    printf("Choisissez : ");
}

void modifierdetailsalle(GestionSalles *gestion)
{
    char nom[LENGTH];
    printf("Entrez le nom de la salle à modifier : ");
    if (scanf("%19s", nom) != 1)
    {
        printf("Erreur de lecture du nom.\n");
        return;
    }

    for (long i = 0; i < gestion->nbsalle; i++)
    {
        if (strcmp(gestion->salles[i]->nom, nom) == 0)
        {
            printf("Modification des détails de la salle %s\n", nom);

            // Changer le nom de la salle
            printf("Entrez le nouveau nom de la salle (laisser vide pour ne pas changer) : ");
            char nouveauNom[LENGTH];
            if (scanf(" %19[^\n]", nouveauNom) == 1 && strlen(nouveauNom) > 0)
            {
                strcpy(gestion->salles[i]->nom, nouveauNom);
            }

            // Changer le nombre de rangées
            long nouveauNbRangees;
            printf("Entrez le nouveau nombre de rangées (0 pour ne pas changer) : ");
            if (scanf("%ld", &nouveauNbRangees) == 1 && nouveauNbRangees > 0)
            {
                // Libérer l'ancienne allocation mémoire
                for (long j = 0; j < gestion->salles[i]->nbRangee; j++)
                {
                    free(gestion->salles[i]->sieges[j]);
                }
                free(gestion->salles[i]->sieges);
                free(gestion->salles[i]->nbSiegesParRangee);

                // Réallouer la mémoire
                gestion->salles[i]->nbRangee = nouveauNbRangees;
                gestion->salles[i]->sieges = malloc(nouveauNbRangees * sizeof(Siege *));
                gestion->salles[i]->nbSiegesParRangee = malloc(nouveauNbRangees * sizeof(long));
                if (gestion->salles[i]->sieges == NULL || gestion->salles[i]->nbSiegesParRangee == NULL)
                {
                    printf("Erreur d'allocation mémoire.\n");
                    exit(1);
                }

                for (long j = 0; j < nouveauNbRangees; j++)
                {
                    int nbSieges;
                    printf("Nombre de sièges pour la rangée %ld : ", j + 1);
                    if (scanf("%d", &nbSieges) != 1 || nbSieges < 0)
                    {
                        printf("Erreur de saisie.\n");
                        return;
                    }
                    gestion->salles[i]->sieges[j] = malloc(nbSieges * sizeof(Siege));
                    gestion->salles[i]->nbSiegesParRangee[j] = nbSieges;
                    if (gestion->salles[i]->sieges[j] == NULL)
                    {
                        printf("Erreur d'allocation mémoire.\n");
                        exit(1);
                    }
                    for (int k = 0; k < nbSieges; k++)
                    {
                        gestion->salles[i]->sieges[j][k].estReserve = 0; // Assumer que les sièges ne sont pas réservés par défaut

                        if (j < (nouveauNbRangees / 3))
                        {
                            gestion->salles[i]->sieges[j][k].prixCategorie = 50; // Catégorie A
                        }
                        else if (j < 2 * (nouveauNbRangees / 3))
                        {
                            gestion->salles[i]->sieges[j][k].prixCategorie = 30; // Catégorie B
                        }
                        else
                        {
                            gestion->salles[i]->sieges[j][k].prixCategorie = 10; // Catégorie C
                        }
                    }
                }
            }

            // Sauvegarder les changements dans un fichier
            sauvegarderSalle(gestion);
            return;
        }
    }
    printf("La salle avec le nom %s n'a pas été trouvée.\n", nom);
}

void afficherDetailSalle(GestionSalles *gestion)
{
    printf("Detail salle :\n");
    for (long i = 0; i < gestion->nbsalle; i++)
    {
        printf("Le nom de la salle : %s\n", gestion->salles[i]->nom);
        printf("Le nom de l'artiste : %s\n", gestion->salles[i]->artiste);
        printf("Le nombre de rangées : %ld\n", gestion->salles[i]->nbRangee);
        afficherPlanSalle(gestion->salles[i]);
    }
}

Salle *creerSalle(char *nom, long nbr, long rangeeA, long rangeeB, long rangeeC)
{
    Salle *salle = malloc(sizeof(Salle));

    if (salle == NULL)
    {
        printf("Erreur d'allocation mémoire.\n");
        exit(1);
    }
    strncpy(salle->nom, nom, LENGTH - 1);
    salle->nom[LENGTH - 1] = '\0';
    salle->nbRangee = nbr;
    salle->sieges = malloc(sizeof(Siege *) * nbr);
    salle->nbSiegesParRangee = malloc(sizeof(long) * nbr);
    if (salle->sieges == NULL || salle->nbSiegesParRangee == NULL)
    {
        printf("Erreur d'allocation mémoire.\n");
        exit(1);
    }
    for (int i = 0; i < nbr; i++)
    {
        long nbSieges;
        do
        {
            printf("Nombre de sièges pour la rangée %d : ", i + 1);
            if (scanf("%ld", &nbSieges) != 1 || nbSieges < 0)
            {
                printf("Erreur de saisie. Veuillez réessayer.\n");
                while (getchar() != '\n')
                    ; // Vider le tampon d'entrée
            }
        } while (nbSieges < 0);

        salle->sieges[i] = malloc(sizeof(Siege) * nbSieges);
        salle->nbSiegesParRangee[i] = nbSieges;
        if (salle->sieges[i] == NULL)
        {
            printf("Erreur d'allocation mémoire.\n");
            for (int j = 0; j < i; j++)
            {
                free(salle->sieges[j]);
            }
            free(salle->sieges);
            free(salle->nbSiegesParRangee);
            free(salle);
            return NULL;
        }
        for (int j = 0; j < nbSieges; j++)
        {
            salle->sieges[i][j].estReserve = 0;
            if (i < rangeeA)
            {
                salle->sieges[i][j].prixCategorie = 50;
            }
            else if (i < rangeeA + rangeeB)
            {
                salle->sieges[i][j].prixCategorie = 30;
            }
            else
            {
                salle->sieges[i][j].prixCategorie = 10;
            }
        }
    }

    // Saisie de l'heure de fin du concert
    char heureFinStr[10];
    struct tm tm;

    do
    {
        printf("Entrez l'heure de fin du concert (format HH:MM) : ");
        if (scanf("%9s", heureFinStr) != 1)
        {
            printf("Erreur de lecture de l'heure de fin. Veuillez réessayer.\n");
            while (getchar() != '\n')
                ; // Vider le tampon d'entrée
        }
        else if (sscanf(heureFinStr, "%d:%d", &tm.tm_hour, &tm.tm_min) != 2)
        {
            printf("Format de l'heure incorrect. Veuillez réessayer.\n");
        }
        else
        {
            break;
        }
    } while (1);

    time_t now = time(NULL);
    struct tm *now_tm = localtime(&now);
    tm.tm_year = now_tm->tm_year;
    tm.tm_mon = now_tm->tm_mon;
    tm.tm_mday = now_tm->tm_mday;
    salle->heureFin = mktime(&tm);
    return salle;
}

void afficherPlanSalle(Salle *salle)
{
    for (long i = 0; i < salle->nbRangee; i++)
    {
        printf("Rangée %ld (Catégorie %d) : ", i + 1, salle->sieges[i][0].prixCategorie);
        for (long j = 0; j < salle->nbSiegesParRangee[i]; j++)
        {
            printf("%c ", salle->sieges[i][j].estReserve ? 'X' : 'O');
        }
        printf("\n");
    }
}

void saisieDonneesSalle(GestionSalles *gestion)
{
    char nom[LENGTH];
    long rangeeA, rangeeB, rangeeC;

    printf("Entrez le nom de la salle : ");
    while (scanf("%19s", nom) != 1)
    {
        printf("Erreur de lecture du nom. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }

    printf("Nombre de rangées de la catégorie A : ");
    while (scanf("%ld", &rangeeA) != 1 || rangeeA < 0)
    {
        printf("Erreur de saisie. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }

    printf("Nombre de rangées de la catégorie B : ");
    while (scanf("%ld", &rangeeB) != 1 || rangeeB < 0)
    {
        printf("Erreur de saisie. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }

    printf("Nombre de rangées de la catégorie C : ");
    while (scanf("%ld", &rangeeC) != 1 || rangeeC < 0)
    {
        printf("Erreur de saisie. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }

    long totalRangees = rangeeA + rangeeB + rangeeC;

    Salle *salle = creerSalle(nom, totalRangees, rangeeA, rangeeB, rangeeC);
    if (salle == NULL)
    {
        printf("Erreur lors de la création de la salle.\n");
        return;
    }

    gestion->salles[gestion->nbsalle++] = salle;
    gestion->sommesieges += totalRangees;

    // Saisie de l'artiste
    printf("Entrez le nom de l'artiste : ");
    while (scanf("%19s", salle->artiste) != 1)
    {
        printf("Erreur de lecture du nom de l'artiste. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }
}

void modeManager(GestionSalles *gestion)
{
    int choix;
    do
    {
        afficherBordures();
        printf("Bienvenue dans le Mode Manager :\n");
        afficherBordures();
        printf("1. Ajouter une salle\n");
        printf("2. Afficher les details d'une salle\n");
        printf("3. Modifier les details d'une salle\n");
        printf("0. Retour au menu principal\n");
        afficherBordures();
        printf("Choisissez : ");
        if (scanf("%d", &choix) != 1)
        {
            printf("Erreur de lecture du choix. Veuillez réessayer.\n");
            while (getchar() != '\n')
                ; // Vider le tampon d'entrée
            continue;
        }
        switch (choix)
        {
        case 1:
            saisieDonneesSalle(gestion);
            break;
        case 2:
            afficherDetailSalle(gestion);
            break;
        case 3:
            modifierdetailsalle(gestion);
            break;
        case 0:
            break;
        default:
            printf("Choix non valide. Veuillez réessayer.\n");
        }
    } while (choix != 0);
}

void modeFestivalier(GestionSalles *gestion)
{
    int choix;
    afficherBordures();
    printf("|| MODE FESTIVALIER ||\n");
    afficherBordures();
    printf("1. Afficher le détail des salles \n");
    printf("2. Réserver un siège\n");
    printf("0. Retour\n");
    afficherBordures();
    do
    {
        printf("Votre choix : ");
        scanf("%d", &choix);
    } while ((choix < 0) || (choix > 2));
    switch (choix)
    {
    case 1:
        afficherDetailSalle(gestion);
        break;
    case 2:
        char nomSalle[LENGTH];
        printf("Entrez le nom de la salle où vous souhaitez réserver : ");
        while (scanf("%19s", nomSalle) != 1)
        {
            printf("Erreur de lecture du nom. Veuillez réessayer : ");
            while (getchar() != '\n')
                ; // Vider le tampon d'entrée
        }

        for (long i = 0; i < gestion->nbsalle; i++)
        {
            if (strcmp(gestion->salles[i]->nom, nomSalle) == 0)
            {
                reserverSalle(gestion->salles[i]);
                return;
            }
        }
        printf("La salle avec le nom %s n'a pas été trouvée.\n", nomSalle);
        break;
    case 0:
        return;
    default:
        printf("Choix invalide, recommencez :\n");
    }
}
int estConcertTermine(Salle *salle)
{
    time_t maintenant = time(NULL);
    return difftime(maintenant, salle->heureFin) > 0;
}

void reserverSalle(Salle *salle)
{

    afficherPlanSalle(salle);
    long rangee, siege;
    printf("Entrez le numéro de la rangée (1-%ld) : ", salle->nbRangee);
    while (scanf("%ld", &rangee) != 1 || rangee < 1 || rangee > salle->nbRangee)
    {
        printf("Erreur de saisie. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }

    printf("Entrez le numéro du siège (1-%ld) : ", salle->nbSiegesParRangee[rangee - 1]);
    while (scanf("%ld", &siege) != 1 || siege < 1 || siege > salle->nbSiegesParRangee[rangee - 1])
    {
        printf("Erreur de saisie. Veuillez réessayer : ");
        while (getchar() != '\n')
            ; // Vider le tampon d'entrée
    }

    if (salle->sieges[rangee - 1][siege - 1].estReserve)
    {
        printf("Ce siège est déjà réservé.\n");
    }
    else
    {
        salle->sieges[rangee - 1][siege - 1].estReserve = 1;
        printf("Réservation réussie pour le siège %ld de la rangée %ld.\n", siege, rangee);
    }
}

void sauvegarderSalle(GestionSalles *gestion)
{
    FILE *fichier = fopen("salles.txt", "w");
    if (fichier == NULL)
    {
        printf("Erreur d'ouverture du fichier.\n");
        exit(1);
    }
    fprintf(fichier, "Nombre de salles : %ld\n", gestion->nbsalle);
    for (long i = 0; i < gestion->nbsalle; i++)
    {
        Salle *salle = gestion->salles[i];
        fprintf(fichier, "Salle : %s\n", salle->nom);
        fprintf(fichier, "Artiste : %s\n", salle->artiste);
        fprintf(fichier, "Nombre de rangées : %ld\n", salle->nbRangee);
        for (long j = 0; j < salle->nbRangee; j++)
        {
            fprintf(fichier, "Rangée %ld : %ld sièges\n", j + 1, salle->nbSiegesParRangee[j]);
        }
        fprintf(fichier, "Heure de fin : %s", ctime(&salle->heureFin));
    }
    fclose(fichier);
}

int main()
{
    GestionSalles gestion;
    gestion.nbsalle = 0;
    gestion.sommesieges = 0;
    gestion.salles = malloc(MAXSIEGE * sizeof(Salle *));
    if (gestion.salles == NULL)
    {
        printf("Erreur d'allocation mémoire.\n");
        exit(1);
    }

    int choix;
    do
    {
        afficherMenu();
        if (scanf("%d", &choix) != 1)
        {
            printf("Erreur de lecture du choix. Veuillez réessayer.\n");
            while (getchar() != '\n')
                ; // Vider le tampon d'entrée
            continue;
        }
        switch (choix)
        {
        case 1:
            modeManager(&gestion);
            break;
        case 2:
            modeFestivalier(&gestion);
            break;
        case 0:
            printf("Au revoir !\n");
            break;
        default:
            printf("Choix non valide. Veuillez réessayer.\n");
        }
    } while (choix != 0);

    for (long i = 0; i < gestion.nbsalle; i++)
    {
        for (long j = 0; j < gestion.salles[i]->nbRangee; j++)
        {
            free(gestion.salles[i]->sieges[j]);
        }
        free(gestion.salles[i]->sieges);
        free(gestion.salles[i]->nbSiegesParRangee);
        free(gestion.salles[i]);
    }
    free(gestion.salles);

    return 0;
}

